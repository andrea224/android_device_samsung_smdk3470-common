From c8d0ed0c1e510b3c6a7d481998a749015c27e534 Mon Sep 17 00:00:00 2001
From: Tobias Gunkel <hennymcc@yahoo.de>
Date: Fri, 23 Dec 2016 15:02:37 +0100
Subject: [PATCH] add SetAudioMode and SetSoundClockMode for MM audio-ril

Change-Id: I3fcdf86fb4c25283ed321b7c99b6080c7b5a7832
---
 ril/libsecril-client/secril-client.cpp | 99 +++++++++++++++++++++++++++++++++-
 ril/libsecril-client/secril-client.h   | 11 ++++
 2 files changed, 108 insertions(+), 2 deletions(-)

diff --git a/ril/libsecril-client/secril-client.cpp b/ril/libsecril-client/secril-client.cpp
index 5cfea70..1d4a4e4 100755
--- a/ril/libsecril-client/secril-client.cpp
+++ b/ril/libsecril-client/secril-client.cpp
@@ -60,8 +60,10 @@ namespace android {
 #define REQ_GET_CALL_MUTE           106
 #define REQ_SET_CALL_VT_CTRL        107
 #define REQ_SET_TWO_MIC_CTRL        108
-#define REQ_SET_DHA_CTRL        109
+#define REQ_SET_DHA_CTRL            109
 #define REQ_SET_LOOPBACK            110
+#define REQ_SET_AUDIO_MODE          112
+#define REQ_SET_SOUND_CLOCK_MODE    113
 
 // OEM request function ID
 #define OEM_FUNC_SOUND          0x08
@@ -78,6 +80,8 @@ namespace android {
 #define OEM_SND_GET_MUTE        0x0C
 #define OEM_SND_SET_TWO_MIC_CTL     0x0D
 #define OEM_SND_SET_DHA_CTL     0x0E
+#define OEM_SND_SET_AUDIO_MODE  0x10
+#define OEM_SND_SET_SOUND_CLOCK_MODE  0x11
 
 #define OEM_SND_TYPE_VOICE          0x01 // Receiver(0x00) + Voice(0x01)
 #define OEM_SND_TYPE_SPEAKER        0x11 // SpeakerPhone(0x10) + Voice(0x01)
@@ -173,7 +177,6 @@ static bool isValidTwoMicCtrl(TwoMicSolDevice device, TwoMicSolReport report);
 static char ConvertSoundType(SoundType type);
 static char ConvertAudioPath(AudioPath path);
 
-
 /**
  * @fn  int RegisterUnsolicitedHandler(HRilClient client, uint32_t id, RilOnUnsolicited handler)
  *
@@ -1056,6 +1059,98 @@ int SetLoopbackTest(HRilClient client, LoopbackMode mode, AudioPath path) {
 
 
 /**
+ * Set audio mode.
+ */
+extern "C"
+int SetAudioMode(HRilClient client, int mode, int mode2) {
+    RilClientPrv *client_prv;
+    int ret;
+    char data[6] = {0,};
+
+    if (client == NULL || client->prv == NULL) {
+        ALOGE("%s: Invalid client %p", __FUNCTION__, client);
+        return RIL_CLIENT_ERR_INVAL;
+    }
+
+    client_prv = (RilClientPrv *)(client->prv);
+
+    if (client_prv->sock < 0 ) {
+        ALOGE("%s: Not connected.", __FUNCTION__);
+        return RIL_CLIENT_ERR_CONNECT;
+    }
+
+    if (mode > 0) {
+		ALOGE("%s: Invalid audio mode", __FUNCTION__);
+		return RIL_CLIENT_ERR_INVAL;
+	}
+
+	ALOGI("%s: Audio mode setting : %d", __FUNCTION__, mode);
+
+    // Make raw data
+    data[0] = OEM_FUNC_SOUND;
+    data[1] = OEM_SND_SET_AUDIO_MODE;
+    data[2] = 0x00;     // data length
+    data[3] = 0x06;     // data length
+    data[4] = mode;
+    data[5] = mode2;
+
+    RegisterRequestCompleteHandler(client, REQ_SET_AUDIO_MODE, NULL);
+
+    ret = SendOemRequestHookRaw(client, REQ_SET_AUDIO_MODE, data, sizeof(data));
+    if (ret != RIL_CLIENT_ERR_SUCCESS) {
+    	RegisterRequestCompleteHandler(client, REQ_SET_AUDIO_MODE, NULL);
+    }
+
+    return ret;
+}
+
+/**
+ * Set sound clock mode.
+ */
+extern "C"
+int SetSoundClockMode(HRilClient client, int mode) {
+    RilClientPrv *client_prv;
+    int ret;
+    char data[5] = {0,};
+
+    if (client == NULL || client->prv == NULL) {
+        ALOGE("%s: Invalid client %p", __FUNCTION__, client);
+        return RIL_CLIENT_ERR_INVAL;
+    }
+
+    client_prv = (RilClientPrv *)(client->prv);
+
+    if (client_prv->sock < 0 ) {
+        ALOGE("%s: Not connected.", __FUNCTION__);
+        return RIL_CLIENT_ERR_CONNECT;
+    }
+
+    if (mode >= 6) {
+		ALOGE("%s: Invalid sound audio mode", __FUNCTION__);
+		return RIL_CLIENT_ERR_INVAL;
+	}
+
+	ALOGI("%s: Set sound clock mode : %d", __FUNCTION__, mode);
+
+    // Make raw data
+    data[0] = OEM_FUNC_SOUND;
+    data[1] = OEM_SND_SET_SOUND_CLOCK_MODE;
+    data[2] = 0x00;     // data length
+    data[3] = 0x05;     // data length
+    data[4] = mode;
+
+    RegisterRequestCompleteHandler(client, REQ_SET_SOUND_CLOCK_MODE, NULL);
+
+    ret = SendOemRequestHookRaw(client, REQ_SET_SOUND_CLOCK_MODE, data, sizeof(data));
+    if (ret != RIL_CLIENT_ERR_SUCCESS) {
+    	RegisterRequestCompleteHandler(client, REQ_SET_SOUND_CLOCK_MODE, NULL);
+    }
+
+    return ret;
+}
+
+
+/**
  * @fn  int InvokeOemRequestHookRaw(HRilClient client, char *data, size_t len)
  *
  * @params  client: Client handle.
diff --git a/ril/libsecril-client/secril-client.h b/ril/libsecril-client/secril-client.h
index 0b3a191..24d7e1d 100755
--- a/ril/libsecril-client/secril-client.h
+++ b/ril/libsecril-client/secril-client.h
@@ -119,6 +119,17 @@ int RegisterRequestCompleteHandler(HRilClient client, uint32_t id, RilOnComplete
 int RegisterErrorCallback(HRilClient client, RilOnError cb, void *data);
 
 /**
+ * Set audio mode.
+ */
+int SetAudioMode(HRilClient client, int mode, int mode2);
+
+/**
+ * Set sound clock mode.
+ * Return is 0 or error code.
+ */
+int SetSoundClockMode(HRilClient client, int mode);
+
+/**
  * Invoke OEM request. Request ID is RIL_REQUEST_OEM_HOOK_RAW.
  * Return is 0 or error code. For RIL_CLIENT_ERR_AGAIN caller should retry.
  */
-- 
2.7.4

